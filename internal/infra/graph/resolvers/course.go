package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/jailtonjunior94/go-uow/internal/infra/graph/generated"
	"github.com/jailtonjunior94/go-uow/internal/infra/graph/model"
	"github.com/jailtonjunior94/go-uow/internal/usecase"
)

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	category := &usecase.CategoryParams{Name: input.Category.Name, Description: input.Category.Description}
	course := &usecase.CourseParams{Name: input.Name, Description: input.Description}

	if err := r.AddCourse.Execute(ctx, category, course); err != nil {
		return nil, err
	}
	return &model.Course{Name: course.Name, Description: &course.Description}, nil
}

// CreateCourseUow is the resolver for the createCourseUow field.
func (r *mutationResolver) CreateCourseUow(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	category := &usecase.CategoryParams{Name: input.Category.Name, Description: input.Category.Description}
	course := &usecase.CourseParams{Name: input.Name, Description: input.Description}

	if err := r.AddCourseUow.Execute(ctx, category, course); err != nil {
		return nil, err
	}
	return &model.Course{Name: course.Name, Description: &course.Description}, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	panic(fmt.Errorf("not implemented: Courses - courses"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
